/* Minimal XLSX Fallback for Excel Export */
(function() {
    'use strict';
    
    // Minimal XLSX implementation for basic Excel export functionality
    window.XLSX = {
        version: '0.18.5-fallback',
        
        utils: {
            json_to_sheet: function(data) {
                if (!Array.isArray(data) || data.length === 0) {
                    return { '!ref': 'A1:A1', A1: { v: 'No data', t: 's' } };
                }
                
                const headers = Object.keys(data[0]);
                const sheet = {};
                const range = { s: { c: 0, r: 0 }, e: { c: headers.length - 1, r: data.length } };
                
                // Add headers
                headers.forEach((header, col) => {
                    const cellRef = this.encode_cell({ c: col, r: 0 });
                    sheet[cellRef] = { v: header, t: 's' };
                });
                
                // Add data
                data.forEach((row, rowIndex) => {
                    headers.forEach((header, col) => {
                        const cellRef = this.encode_cell({ c: col, r: rowIndex + 1 });
                        const value = row[header];
                        sheet[cellRef] = { 
                            v: value, 
                            t: typeof value === 'number' ? 'n' : 's' 
                        };
                    });
                });
                
                sheet['!ref'] = this.encode_range(range);
                return sheet;
            },
            
            book_new: function() {
                return { SheetNames: [], Sheets: {} };
            },
            
            book_append_sheet: function(workbook, sheet, name) {
                workbook.SheetNames.push(name);
                workbook.Sheets[name] = sheet;
            },
            
            sheet_to_csv: function(sheet) {
                if (!sheet || !sheet['!ref']) return 'No data available';
                
                const range = this.decode_range(sheet['!ref']);
                let csv = '';
                
                for (let row = range.s.r; row <= range.e.r; row++) {
                    const rowData = [];
                    for (let col = range.s.c; col <= range.e.c; col++) {
                        const cellRef = this.encode_cell({ c: col, r: row });
                        const cell = sheet[cellRef];
                        rowData.push(cell ? cell.v : '');
                    }
                    csv += rowData.join(',') + '\\n';
                }
                
                return csv;
            },
            
            encode_cell: function(cell) {
                return String.fromCharCode(65 + cell.c) + (cell.r + 1);
            },
            
            decode_range: function(range) {
                const parts = range.split(':');
                return {
                    s: this.decode_cell(parts[0]),
                    e: this.decode_cell(parts[1])
                };
            },
            
            decode_cell: function(cellRef) {
                const col = cellRef.charCodeAt(0) - 65;
                const row = parseInt(cellRef.slice(1)) - 1;
                return { c: col, r: row };
            },
            
            encode_range: function(range) {
                return this.encode_cell(range.s) + ':' + this.encode_cell(range.e);
            }
        },
        
        writeFile: function(workbook, filename) {
            console.warn('Excel export using fallback XLSX library');
            
            try {
                // Convert to CSV for basic export functionality
                const sheetName = workbook.SheetNames[0];
                if (!sheetName) {
                    alert('No data to export');
                    return;
                }
                
                const csv = this.utils.sheet_to_csv(workbook.Sheets[sheetName]);
                const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });
                
                // Create download link
                const link = document.createElement('a');
                const url = URL.createObjectURL(blob);
                link.setAttribute('href', url);
                link.setAttribute('download', filename.replace('.xlsx', '.csv'));
                link.style.visibility = 'hidden';
                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);
                
                console.log('File exported as CSV (XLSX fallback mode)');
            } catch (error) {
                console.error('Export failed:', error);
                alert('Export failed. Please try again.');
            }
        }
    };
    
    console.log('XLSX fallback library loaded successfully');
})();